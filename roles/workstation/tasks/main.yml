---
- name: Set hostname
  become: yes
  hostname:
    name: "{{ hostname }}"
  when: hostname is defined
  tags:
    - hostname

- name: Disable sshd
  become: yes
  service:
    name: sshd
    enabled: no
    state: stopped
  tags:
    - sshd

- name: Lock root user password
  become: yes
  user:
    name: root
    password_lock: true

- name: Remove bootstrap repo
  become: yes
  file:
    path: /etc/yum.repos.d/ansible.repo
    state: absent
  tags:
    - packages

- name: Add rpmfusion repos
  become: yes
  dnf:
    name:
      - https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ ansible_distribution_version }}.noarch.rpm
      - https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ ansible_distribution_version }}.noarch.rpm
    disable_gpg_check: yes
  when: workstation_enable_rpmfusion
  tags:
    - packages

- name: Add VS Code repo key
  become: yes
  rpm_key:
    key: https://packages.microsoft.com/keys/microsoft.asc
  tags:
    - packages

- name: Add VS Code repo
  become: yes
  yum_repository:
    name: code
    description: Visual Studio Code
    baseurl: https://packages.microsoft.com/yumrepos/vscode
    gpgcheck: yes
    gpgkey: https://packages.microsoft.com/keys/microsoft.asc
    file: vscode
  tags:
    - packages

- name: Update installed packages
  become: yes
  package:
    name: "*"
    state: latest
  tags:
    - packages

- name: Install packages
  become: yes
  package:
    name: "{{ workstation_packages }}"
  tags:
    - packages

- name: Add flathub
  become: yes
  flatpak_remote:
    name: flathub
    state: present
    flatpakrepo_url: https://flathub.org/repo/flathub.flatpakrepo
  when: workstation_use_flatpak
  tags:
    - packages

- name: Install flatpaks
  become: yes
  flatpak:
    name: "{{ flatpak }}"
    state: present
  loop: "{{ workstation_flatpaks }}"
  loop_control:
    loop_var: flatpak
  when: workstation_use_flatpak
  tags:
    - packages

- name: Enable classic snap support
  become: yes
  file:
    src: /var/lib/snapd/snap
    dest: /snap
    state: link
  when: workstation_use_snapd

- name: Install snaps
  become: yes
  snap:
    name: "{{ workstation_snaps }}"
  when: workstation_use_snapd

- name: Install snaps (classic)
  become: yes
  snap:
    name: "{{ item }}"
    classic: yes
  with_items: "{{ workstation_snaps_classic }}"
  when: workstation_use_snapd

- name: Add extra ca certs to certs directory
  become: yes
  copy:
    content: "{{ cert.value }}"
    dest: /etc/pki/tls/certs/{{ cert.key }}
  loop: "{{ workstation_extra_ca_certs | dict2items }}"
  loop_control:
    loop_var: cert
  tags:
    - ca

- name: Add extra ca certs to ca-trust
  become: yes
  copy:
    content: "{{ cert.value }}"
    dest: /etc/pki/ca-trust/source/anchors/{{ cert.key }}
  loop: "{{ workstation_extra_ca_certs | dict2items }}"
  loop_control:
    loop_var: cert
  notify: update-ca-trust
  tags:
    - ca

- name: Start thunderbolt daemon
  become: yes
  service:
    name: bolt
    enabled: yes
    state: started
  tags:
    - thunderbolt

- name: Allow wheel to manage libvirt without password
  become: yes
  copy:
    src: 50-libvirt.rules
    dest: /etc/polkit-1/rules.d/50-libvirt.rules
    mode: 0444

- name: Create workstation users, append to wheel group
  become: yes
  user:
    name: "{{ workstation_user.key }}"
    uid: "{{ workstation_user.value.uid | default(omit) }}"
    password: "{{ workstation_user.value.password | password_hash('sha512', 65534 | random(seed=ansible_machine_id) | string) }}"
    groups: wheel
    append: yes
    ssh_key_comment: "{{ workstation_user.key }} on {{ ansible_product_version }}"
    generate_ssh_key: yes
  loop: "{{ workstation_users | dict2items }}"
  loop_control:
    loop_var: workstation_user
  no_log: yes
  tags:
    - users
